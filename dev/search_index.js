var documenterSearchIndex = {"docs":
[{"location":"featuresets/","page":"Feature Sets","title":"Feature Sets","text":"CurrentModule = TimeseriesFeatures.FeatureSets","category":"page"},{"location":"featuresets/","page":"Feature Sets","title":"Feature Sets","text":"Modules = [FeatureSets]","category":"page"},{"location":"featuresets/#TimeseriesFeatures.FeatureSets.FeatureSet","page":"Feature Sets","title":"TimeseriesFeatures.FeatureSets.FeatureSet","text":"FeatureSet(methods, [names, keywords, descriptions])\nFeatureSet(features::Vector{T}) where {T <: AbstractFeature}\n\nConstruct a FeatureSet from methods (a vector of functions) and optionally provide names as a vector of symbols, keywords as a vector of vectors of strings, and descriptions as a vector of strings. A FeatureSet can be called on a time-series vector or matrix X (with time series occupying columns) to return a FeatureArray of feature values. Subsets of a FeatureSet 𝒇 can be obtained by indexing with feature names (as symbols) or the regular linear and logical indices. FeatureSets also support simple set operations defined for arrays, such as unions and intersections, as well as convenient syntax for concatenation (+) and set differencing (\\). Note that two features are considered the same if and only if their names are equal.\n\nExamples\n\n𝒇 = FeatureSet([sum, length], [:sum, :length], [[\"distribution\"], [\"sampling\"]], [\"∑x¹\", \"∑x⁰\"])\nX = randn(100, 2) # 2 time series, 100 samples long\nF = 𝒇(X)\n\n# Joining feature sets\n𝒇₁ = FeatureSet([x->min(x...), x->max(x...)], [:min, :max], [[\"distribution\"], [\"distribution\"]], [\"minimum\", \"maximum\"])\n𝒈₁ = 𝒇 + 𝒇₁\nG = 𝒈₁(X)\n\n# Intersecting feature sets, where features are identified exclusively by their names\n𝒇₂ = FeatureSet(x->prod, :sum, [\"distributions\"], \"∏x\")\n𝒈₂ = 𝒇 ∩ 𝒇₂ # The intersection of two feature sets, both with their own :sum\nG = 𝒈₂(X) # The intersection contains the :sum of the first argument to ∩; 𝒇\n\n\n\n\n\n","category":"type"},{"location":"featurearrays/","page":"Feature Arrays","title":"Feature Arrays","text":"CurrentModule = TimeseriesFeatures.FeatureArrays","category":"page"},{"location":"featurearrays/","page":"Feature Arrays","title":"Feature Arrays","text":"Modules = [FeatureArrays]","category":"page"},{"location":"featurearrays/#TimeseriesFeatures.FeatureArrays.FeatureArray","page":"Feature Arrays","title":"TimeseriesFeatures.FeatureArrays.FeatureArray","text":"F = FeatureArray(data::AbstractArray, features::Union{Tuple{Symbol},Vector{Symbol}}, [timeseries::Union{Vector, Tuple}], args...)\n\nConstruct a FeatureArray, which annotates the array data with names of features along rows and, optionally, timeseries along columns. Since FeatureArray <: AbstractFeatureArray <: AbstractDimArray, further arguments to the FeatureArray constructor are passed to the DimArray constructor. To access feature names, use getnames(F).\n\nExamples\n\ndata = rand(Int, 2, 10) # Some feature matrix with 2 features and 10 timeseries\nF = FeatureArray(data, [:sum, :length])\n\n\n\n\n\n","category":"type"},{"location":"featurearrays/#TimeseriesFeatures.FeatureArrays.FeatureMatrix","page":"Feature Arrays","title":"TimeseriesFeatures.FeatureArrays.FeatureMatrix","text":"FeatureArray{T, 2} where {T}\n\nAn alias to construct a FeatureArray for a flat set of timeseries.\n\nExamples\n\ndata = rand(Int, 2, 3) # Some feature matrix with 2 features and 3 timeseries\nF = FeatureMatrix(data, [:sum, :length], [1, 2, 3])\n\n\n\n\n\n","category":"type"},{"location":"featurearrays/#TimeseriesFeatures.FeatureArrays.FeatureVector","page":"Feature Arrays","title":"TimeseriesFeatures.FeatureArrays.FeatureVector","text":"FeatureArray{T, 1} where {T}\n\nAn alias to construct a FeatureArray for a single time series.\n\nExamples\n\ndata = randn(2) # Feature values for 1 time series\n𝐟 = FeatureVector(data, [:sum, :length])\n\n\n\n\n\n","category":"type"},{"location":"featurearrays/#TimeseriesFeatures.FeatureArrays.featureDims-Tuple{DimensionalData.AbstractDimArray}","page":"Feature Arrays","title":"TimeseriesFeatures.FeatureArrays.featureDims","text":"getnames(𝒇::FeatureArray)\n\nGet the names of features represented in the feature vector or array 𝒇 as a vector of symbols.\n\n\n\n\n\n","category":"method"},{"location":"features/","page":"Features","title":"Features","text":"CurrentModule = TimeseriesFeatures.Features","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"Modules = [Features]","category":"page"},{"location":"features/#TimeseriesFeatures.Features.Feature","page":"Features","title":"TimeseriesFeatures.Features.Feature","text":"𝑓 = Feature([;] method::Function, name=Symbol(method), description=\"\", keywords=\"\")\n\nConstruct a Feature, which is a function annotated with a name, keywords and short description. Features can be called as functions while getname(𝑓), getkeywords(𝑓) and getdescription(𝑓) can be used to access the annotations. The function should have at minimum a method for AbstractVector. The method on vectors will be applied column-wise to Matrix inputs, regardless of the function methods defined for Matrix.\n\nExamples\n\n𝑓 = Feature(sum, :sum, [\"distribution\"], \"Sum of time-series values\")\n𝑓(1:10) # == sum(1:10) == 55\ngetdescription(𝑓) # \"Sum of time-series values\"\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = TimeseriesFeatures","category":"page"},{"location":"#TimeseriesFeatures","page":"Home","title":"TimeseriesFeatures","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TimeseriesFeatures, including syntax for the Feature, FeatureSet, and FeatureArray types.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [TimeseriesFeatures, Features, FeatureSets, FeatureArrays]","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [TimeseriesFeatures]","category":"page"}]
}
